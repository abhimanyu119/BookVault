import { Link } from "react-router-dom";
import PropTypes from "prop-types";

const BookCard = ({ book, showDescription = true }) => {
  // Truncate long text
  const truncateText = (text, maxLength) => {
    if (!text) return "";
    return text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
  };

  // Format author list
  const formatAuthors = (authors) => {
    if (!authors || authors.length === 0) return "Unknown Author";
    if (authors.length === 1) return authors[0];
    return `${authors[0]} et al.`;
  };

  return (
    <div className="bg-gray-900/60 backdrop-blur-sm rounded-xl border border-indigo-900/30 overflow-hidden hover:border-indigo-700/30 transition-all duration-300 flex flex-col h-full">
      {/* Book cover */}
      <div className="relative pt-[140%]">
        {book.imageLinks && book.imageLinks.thumbnail ? (
          <img 
            src={book.imageLinks.thumbnail.replace('http:', 'https:')} // Ensure HTTPS
            alt={`Cover of ${book.title}`}
            className="absolute inset-0 w-full h-full object-cover"
          />
        ) : (
          <div className="absolute inset-0 w-full h-full bg-indigo-900/20 flex items-center justify-center">
            <svg className="w-16 h-16 text-indigo-400/40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M4 19.5C4 18.837 4.26339 18.2011 4.73223 17.7322C5.20107 17.2634 5.83696 17 6.5 17H20" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              <path d="M6.5 2H20V22H6.5C5.83696 22 5.20107 21.7366 4.73223 21.2678C4.26339 20.7989 4 20.163 4 19.5V4.5C4 3.83696 4.26339 3.20107 4.73223 2.73223C5.20107 2.26339 5.83696 2 6.5 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
            </svg>
          </div>
        )}
        
        {/* Rating badge if available */}
        {book.averageRating > 0 && (
          <div className="absolute top-2 right-2 bg-indigo-900/80 backdrop-blur-sm text-yellow-400 px-2 py-1 rounded text-xs font-medium flex items-center">
            <svg className="w-3 h-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
            {book.averageRating.toFixed(1)}
          </div>
        )}
      </div>
      
      {/* Book details */}
      <div className="p-4 flex-grow flex flex-col">
        <h3 className="text-white font-semibold line-clamp-2 mb-1">{book.title}</h3>
        {book.subtitle && (
          <p className="text-indigo-300 text-sm mb-2 line-clamp-2">{book.subtitle}</p>
        )}
        <p className="text-indigo-400 text-sm mb-3">{formatAuthors(book.authors)}</p>
        
        {/* Book description - optional */}
        {showDescription && book.description && (
          <p className="text-indigo-200 text-sm mb-4 line-clamp-3">
            {truncateText(book.description, 150)}
          </p>
        )}
        
        {/* Action buttons */}
        <div className="mt-auto space-y-2">
          <Link 
            to={`/books/${book.id}`}
            className="block w-full py-2 text-center bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded transition-colors"
          >
            View Details
          </Link>
          {book.previewLink && (
            <a 
              href={book.previewLink} 
              target="_blank" 
              rel="noopener noreferrer"
              className="block w-full py-2 text-center bg-gray-800 hover:bg-gray-700 text-white text-sm font-medium rounded transition-colors"
            >
              Preview
            </a>
          )}
        </div>
      </div>
    </div>
  );
};

BookCard.propTypes = {
  book: PropTypes.shape({
    id: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    subtitle: PropTypes.string,
    authors: PropTypes.arrayOf(PropTypes.string),
    description: PropTypes.string,
    averageRating: PropTypes.number,
    imageLinks: PropTypes.shape({
      thumbnail: PropTypes.string,
      smallThumbnail: PropTypes.string
    }),
    previewLink: PropTypes.string
  }).isRequired,
  showDescription: PropTypes.bool
};

export default BookCard;